download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx', 'data2.xlsx', method = 'curl')
?read.xlsx
library(xlsx)
install.packages('xlsx')
library(xlsx)
?read.xlsx
data <- read.xlsx('data2.xlsx', rowIndex = 8:23, colIndex = 7:15)
data <- read.xlsx('data2.xlsx', sheetIndex = 1, rowIndex = 8:23, colIndex = 7:15)
data
class(data)
dat <- read.xlsx('data2.xlsx', sheetIndex = 1, rowIndex = 8:23, colIndex = 7:15)
sum(dat$Zip*dat$Ext,na.rm=T)
?na.rm
TRUE == T
FALSE == F
library(XML)
install.packages('XML')
library(XML)
?xmlTreeParse
doc <- xmlTreeParse('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml', useInternal=T)
doc <- xmlTreeParse('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml', useInternalNodes=T)
doc <- xmlTreeParse('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml', useInternalNodes=TRUE)
doc <- xmlTreeParse('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml', useInternal=TRUE)
doc <- xmlTreeParse('http://www.w3schools.com/xml/simple.xml', useInternal=TRUE)
rm(doc)
doc <- xmlTreeParse('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml', useInternal=TRUE, isURL=TRUE)
doc <- xmlTreeParse('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml')
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml','restaurants.xml', method='curl')
doc <- xmlTreeParse('restaurants.xml')
rootNode <- xmlRoot(doc)
?xmlRoot
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
doc <- xmlTreeParse('restaurants.xml', useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlNames(rootNode)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
xmlName(rootNode[[1]][[1]])
names(rootNode[[1]][[1]])
xmlSapply(rootNode[[1]], xmlValue)
xmlSApply(rootNode[[1]], xmlValue)
names(rootNode[[1]])
xmlSApply(rootNode[[1]], xmlValue)
names(rootNode[[1]][[1]])
rootNode[[1]][[1]]
rootNode[[1]][[1]]$location_1
rootNode[[1]][[1]]$name
rootNode[[1]][[1]][[1]]
xmlValue(rootNode[[1]][[1]])
xpathSApply(rootNode[[1]],'//name',xmlValue)
names(rootNode[[1]][[1]])
xpathSApply(rootNode[[1]],'//zipcode',xmlValue)
xpathSApply(rootNode[[1]],'//zipcode',xmlValue)==21231
sum(xpathSApply(rootNode[[1]],'//zipcode',xmlValue)==21231)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv', 'ID2006.csv', method='curl')
?fread
install.packages('data.table')
library(data.table)
?fread
DT <- fread('ID2006.csv')
head(DT)
system.time(DT[,mean(pwgtp15),by=SEX])
DT[,mean(pwgtp15),by=SEX]
class(DT)
class(1)
class(T)
?sapply
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
sapply(split(DT$pwgtp15,DT$SEX),mean)
system.time(mean(DT$pwgtp15,by=DT$SEX))
mean(DT$pwgtp15,by=DT$SEX)
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(mean(DT$pwgtp15,by=DT$SEX))
tapply(DT$pwgtp15,DT$SEX,mean)
mean(DT$pwgtp15,by=DT$SEX)
?mean
system.time(rowMeans(DT)[DT$SEX==1])
rowMeans(DT)[DT$SEX==1]
rowMeans(DT[DT$SEX==1])
rowMeans(DT[DT$SEX==1,])
?rowMeans
x = cbind(c(1,2), c(3,4))
x
rowMeans(x)
?png
?plot
setwd("~/Github/ExData_Plotting1")
source('plot2.R')
source('plot2.R')
source('plot2.R')
source('plot2.R')
source('plot2.R')
setwd("~/Documents/coursera/R Programming/Exploratory_data_analysis")
source('plot2.R')
source('plot2.R')
source('plot2.R')
source('plot2.R')
source('plot2.R')
?plot
?plot
source('plot2.R')
source('plot2.R')
source('plot2.R')
source('plot2.R')
rm(list= ls())
source('plot2.R')
class(x)
class(x$Global_active_power)
x$Global_active_power
x$Global_active_power[1]
x$Global_active_power[1] == 0.326
?formula
?plot
source('plot2.R')
source('plot2.R')
source('plot2.R')
source('plot2.R')
source('plot2.R')
source('plot2.R')
?as.numeric
?legend
?subset
?plot
?legend
?plot.formula
library(rpart)
?predict
install.packages('sqldf')
library(sqldf)
install.packages('RMySQL')
library(RMySQL)
getwd()
setwd(.)
setwd(..)
setwd(./)
setwd(../)
setwd("~/Documents/coursera/R Programming/Getting and Cleaning Data/Quiz2")
acs <- read.csv('getdata-data-ss06pid.csv')
head(acs)
colnames(acs)
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select * from acs where AGEP < 50 and pwgtp1")
sqldf("select * from acs where AGEP < 50")
?sqldf
class(acs
)
sqldf("select pwgtp1 from acs where AGEP < 50")
unique(acs$AGEP)
detach("package:RMySQL", unload=TRUE)
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select unique AGEP from acs")
sqldf("select distinct AGEP from acs")
unique(acs$AGEP)
sqldf("select unique AGEP from acs")
sqldf("select unique AGEP from acs")
sqldf("select AGEP where unique from acs")
con = url('http://biostat.jhsph.edu/~jleek/contact.html ')
con = url('http://biostat.jhsph.edu/~jleek/contact.html')
htmlCode <- readLines(con)
close(con)
htmlCode
htmlCode[10]
htmlCode[20]
?nchar
nchar(htmlCode[10])
nchar(htmlCode[200])
nchar(htmlCode[20])
htmlCode[200]
nchar(htmlCode[30])
nchar(htmlCode[100])
?read.fwf
url <- 'http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for'
?file.path
getwd()
f <- file.path(getwd(), 'wksst.txt')
download.file(url, destfile = f, method = 'curl')
data <- read.fwf('wksst.txt')
?read.fwf
data <- read.fwf('wksst.txt', widths = c(9,5,8,5,8,5,8,5,8), header = FALSE, skip = 4)
head(data)
data <- read.fwf('wksst.txt', widths = c(10,5,8,5,8,5,8,5,8), header = FALSE, skip = 4)
head(data)
data <- read.fwf('wksst.txt', widths = c(10,13,13,13,13), header = FALSE, skip = 4)
head(data)
data <- read.fwf('wksst.txt', widths = c(10,9,4,9,4,9,4,9,4), header = FALSE, skip = 4)
head(data)
class(data$V4)
mean(data[,4])
sum(data[,4])
head(data[,4])
tail(data[,4])
ncol(data)
colnames(data)
sum(data$V4)
sum(data$V2)
sum(data$V3)
sum(data$V4)
sum(data$V5)
sum(data$V6)
sum(data$V7)
sum(data$V8)
sum(data$V9)
is.numeric(3)
sum(!is.numeric(data[,4]))
setwd("~/Documents/coursera/R Programming/Getting and Cleaning Data/Assessment1")
url <- 'https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip'
fl <- file.path(getwd(), 'activity.zip')
down.file(url, destfile = fl, method = 'curl')
download.file(url, destfile = fl, method = 'curl')
?unzip
unzip('activity.zip')
d <- read.csv('activity.zip')
head(d)
d
rm(list = ls())
setwd("~/Github/RepData_PeerAssessment1")
unzip('activity.zip')
?read.csv
data <- read.csv('activity.csv')
head(data)
class(data)
str(data)
?factor
factor(data, data$date)
?subset
?select
?mean
?sum
split(data, data$date)
sapply(split(data,data$date), sum)
sapply(split(data,data$date), function x: sum(x$steps)
sapply(split(data,data$date), function(x) sum(x$steps))
sapply(split(data,data$date), function x: sum(x$steps))
sapply(split(data,data$date), function(x) sum(x$steps))
head(data)
data[!is.na(data$steps)]
data[!is.na(data$steps),]
head(data)
nrows(data)
nrow(data)
nrow(data[!is.na(data$steps),])
d<-nrow(data[!is.na(data$steps),])
d$date
d <- data[!is.na(data$steps),]
d$date
data$date
head(d)
?his
?hist
?barplot
sapply(split(d,d$date), function(x) sum(s$steps))
sapply(split(d,d$date), function(x) sum(x$steps))
steps_perday <- sapply(split(d,d$date), function(x) sum(x$steps))
class(steps_perday)
hist(steps_perday)
mean(steps_perday)
median(steps_perday)
str(steps_perday)
summary(steps_perday)
?median
median(steps_perday)
max(steps_perday)
steps_int <- sapply(split(d,d$interval), function(x) mean(x$steps))
steps_int
?stdtime
?strptime
strptime('2350', format = '%H%M')
plot(steps_int)
plot(steps_int, type = 'l')
colnames(steps_int)
colname(steps_int)
head(data$interval)
data$interval
class(data$interval)
?strptime
strftime('2350', format = '%H%M')
strptime('2350', format = '%H%M')
t <- strptime('2350', format = '%H%M')
t
class(t)
t[1]
t[2]
t[[1]]
typeof(t)
print(t)
cat(t, )
cat(t, 'n')
cat(t)
cat(t, '\n')
tt <- sys.time()
tt <- Sys.time()
tt
class(tt)
cat(tt, '\n')
class(t)
cat(t, '\n')
?as.time
format('2300', '%H:%M')
format(t, '%H:%M')
tt <-format(t, '%H:%M')
class(tt)
?plot
length(steps_int)
names(steps_int)
plot(names(steps_int), steps_int, type='l')
steps_int1 <- steps_int
steps <- steps_int
names(steps)
steps
strptime(names(steps), '%H%M')
format(strptime(names(steps), '%H%M'), '%H:%M')
plot(format(strptime(names(steps), '%H%M'), '%H:%M'), steps, type = 'l')
plot(names(steps), steps, type = 'l')
plot(strptime(names(steps), '%H%M'), steps, type = 'l')
names(steps) <- format(strptime(names(steps), '%H%M'), '%H:%M')
steps
plot(names(steps), steps, type = 'l')
a <- names(steps)
class9a
class(a)
typeof(a)
length(a)
plot(a, steps, type='l')
plot(steps, type='l')
plot(names(steps)steps, type='l')
plot(names(steps),steps, type='l')
plot(names(steps_int),steps_int, type='l')
strptime(names(steps_int), '%H%M')
plot(strptime(names(steps_int), '%H%M'), steps_int, type='l')
name(steps_int)
names(steps_int)
?strptime
?sprintf
sprintf('%04d',5)
sprintf('%04s',5)
sprintf('%04s','5')
sprintf('%04','5')
sprintf('%04',names(steps)[4])
sprintf('%04s',names(steps)[4])
sprintf('%04s',names(steps)[1])
names(steps)
sprintf('%04s',names(steps_int)[1])
sprintf('%04s',names(steps_int)[2])
sprintf('%04s',names(steps_int)[4])
sprintf('%04s',names(steps_int))
names(steps_int)
names(steps_int) <- sprintf('%04s',names(steps_int))
steps_int
plot(strptime(names(steps_int), '%H%M'), steps_int, type='l')
head(data)
nrow(data)
class(data$interval)
sprintf('%04d',data$interval)
head(data$interval)
sprintf('avc')
sprintf('avc%04s', 'av')
?sprintf
sprintf('%02d:%02d', 0, 5)
data$interval[2]
5/100
5//100
5%100
5%%100
5%/%100
sprintf('%02d:%02d', data$interval[2]%/%100, data$interval[2]%%5)
sprintf('%02d:%02d', data$interval[2]%/%100, data$interval[2]%%100)
sprintf('%02d:%02d', data$interval%/%100, data$interval%%100)
data$time <- sprintf('%02d:%02d',data$interval%/%100, data$interval%%100)
d <- data[!is.na(data$steps), ]
steps_perday <- sapply(split(d,d$date), function(x) sum(x$steps))
hist(steps_perday)
steps <- sapply(split(d, d$time), function(x) mean(x$step))
steps
steps == steps_int
sum(!steps == steps_int)
!steps == steps_int
plot(step, type='l')
plot(steps, type='l')
plot(names(steps),steps, type='l')
names(steps)
plot(strptime(names(steps), format = '%H:%M'),steps, type='l')
plot(strptime(names(steps), format = '%H:%M'),steps, type='l', xlab = 'time')
max(steps)
?max
steps == max(steps)
steps[steps == max(steps)]
names(steps[steps == max(steps)])
?aggregate
df.orig <- data.frame(vars = rep(LETTERS[1:5], 2), obs1 = c(1:10), obs2 = c(11:20))
df.orig
df.agg <- aggregate(obs1 ~ vars, df.orig, max)
df.agg
?merge
merge(steps, max(steps))
df.agg
merge(df.agg, df.orig)
steps
which.max(steps)
data1 <- data
nasteps <- is.na(data$steps)
data$steps[nasteps] <- steps[data$time[nasteps]]
head(data)
head(steps)
tail(data)
tail(data1)
tail(steps)
steps_perday
?weekdays
head(data)
?strptime
paste(data$date, data$interval)
with(data, paste(date, interval))
rm(list+ls())
rm(list=ls())
data <- read.csv('activity.csv')
data$interval <- sprintf('%02d:%02d',data$interval%/%100, data$interval%%100)
head(data)
data$time <- strptime(with(data, paste(date, interval)), '%Y-%m-%d %H:%M')
head(data)
d <- data[!is.na(data$steps), ]
steps_perday <- sapply(split(d,d$date), function(x) sum(x$steps))
hist(steps_perday)
mean(steps_perday)
median(steps_perday)
steps <- sapply(split(d, d$interval), function(x) mean(x$step))
steps
plot(strptime(names(steps), format='%H:%M'), steps, type='l', xlab='time')
names(which.max(steps))
sum(is.na(data$steps))
nasteps <- is.na(data$steps)
data_new <- data
data_new$steps[nasteps] <- steps[data_new$time[nasteps]]
head(data_new)
weekdays(data_new$time)
?weekdays
?factor
?knit2html
library(knitr)
?knitr2html
?knit2html
knit2html('PA1_template.Rmd')
weekdays(data$time)
weekdays(data$time) in c('Saturday', 'Sunday')
?in
weekdays(data$time) == 'Sunday' or weekdays(data$time) == 'Saturday'
weekdays(data$time) == 'Sunday' | weekdays(data$time) == 'Saturday'
data$weekdays <- weekdays(data$time) == 'Sunday' | weekdays(data$time) == 'Saturday'
data$weekdays <- factor(data$weekdays, c('weekend', 'weekday'))
data$weekdays
data$weekdays <- weekdays(data$time) == 'Sunday' | weekdays(data$time) == 'Saturday'
data$weekdays
data$weekday <- factor(data$weekdays, c('weekend', 'weekday'))
data$weekday
data$weekday <- factor(data$weekdays, label=c('weekend', 'weekday'))
data$weekday
a <- c(TRUE, FALSE)
b <- factor(a, label= c('T', 'F'))
b
a
b[1]
b <- factor(a, label= c('F','T'))
b
a
data$weekday <- factor(data$weekdays, label=c('weekdays', 'weekend'))
data$weekday
?par
?title
?transform
?xyplot
library(lattice)
?xyplot
s <- sapply(split(d,d$date), function(x) sum(x$steps))
typeof(s)
class(s)
length(s)
s
steps_perday
plot(strptime(names(steps), format='%H:%M'), steps, type='l', xlab='time')
s <- transform(steps, time = strptime(names(steps), format='%H:%M'))
s
?rename
head(s)
s <- transform(steps, time = names(steps))
head(s)
xyplot(X_data ~ time, data = s)
xyplot(X_data ~ time, data = s, type = 'l')
install.packages('ggplot2')
library(nlim)
library(nlme)
xyplot(weight ~ Time | Diet, BodyWeight)
q <- xyplot(weight ~ Time | Diet, BodyWeight)
class(q)
?lpoints
?lines
?trellis.par.set
?splom
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
install.packages('ggplot2')
install.packages('ggplot2')
install.packages(ggplot2)
install.packages('ggplot2')
install.packages("ggplot2")
